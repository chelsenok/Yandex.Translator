package com.chelsenok.translator.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TRANSLATION_RESULT".
*/
public class TranslationResultDao extends AbstractDao<TranslationResult, Long> {

    public static final String TABLENAME = "TRANSLATION_RESULT";

    /**
     * Properties of entity TranslationResult.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property NativeSentence = new Property(1, String.class, "nativeSentence", false, "NATIVE_SENTENCE");
        public final static Property ForeignSentence = new Property(2, String.class, "foreignSentence", false, "FOREIGN_SENTENCE");
        public final static Property NativeShortcut = new Property(3, String.class, "nativeShortcut", false, "NATIVE_SHORTCUT");
        public final static Property ForeignShortcut = new Property(4, String.class, "foreignShortcut", false, "FOREIGN_SHORTCUT");
    }


    public TranslationResultDao(DaoConfig config) {
        super(config);
    }
    
    public TranslationResultDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TRANSLATION_RESULT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"NATIVE_SENTENCE\" TEXT," + // 1: nativeSentence
                "\"FOREIGN_SENTENCE\" TEXT," + // 2: foreignSentence
                "\"NATIVE_SHORTCUT\" TEXT," + // 3: nativeShortcut
                "\"FOREIGN_SHORTCUT\" TEXT);"); // 4: foreignShortcut
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TRANSLATION_RESULT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TranslationResult entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String nativeSentence = entity.getNativeSentence();
        if (nativeSentence != null) {
            stmt.bindString(2, nativeSentence);
        }
 
        String foreignSentence = entity.getForeignSentence();
        if (foreignSentence != null) {
            stmt.bindString(3, foreignSentence);
        }
 
        String nativeShortcut = entity.getNativeShortcut();
        if (nativeShortcut != null) {
            stmt.bindString(4, nativeShortcut);
        }
 
        String foreignShortcut = entity.getForeignShortcut();
        if (foreignShortcut != null) {
            stmt.bindString(5, foreignShortcut);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TranslationResult entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String nativeSentence = entity.getNativeSentence();
        if (nativeSentence != null) {
            stmt.bindString(2, nativeSentence);
        }
 
        String foreignSentence = entity.getForeignSentence();
        if (foreignSentence != null) {
            stmt.bindString(3, foreignSentence);
        }
 
        String nativeShortcut = entity.getNativeShortcut();
        if (nativeShortcut != null) {
            stmt.bindString(4, nativeShortcut);
        }
 
        String foreignShortcut = entity.getForeignShortcut();
        if (foreignShortcut != null) {
            stmt.bindString(5, foreignShortcut);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public TranslationResult readEntity(Cursor cursor, int offset) {
        TranslationResult entity = new TranslationResult( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // nativeSentence
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // foreignSentence
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // nativeShortcut
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // foreignShortcut
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TranslationResult entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setNativeSentence(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setForeignSentence(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setNativeShortcut(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setForeignShortcut(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(TranslationResult entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(TranslationResult entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(TranslationResult entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
